import os
import numpy as np
from abc import abstractmethod
from typing import Any, List


class PolicyValidation:
    """Abstract class defining the interfaces required by evaluation program.
    """

    """initial_state is paticipant-defined first day's user state in evaluation,
    derived from the offline data in May 18th.
    """
    initial_states: Any = None

    @abstractmethod
    def __init__(self, *args, **kwargs):
        """Initialize the members required for your model here.
        You may also provide some parameters for __init__ method,
        but you must fill the arguments yourself in the get_pv_instance function.
        """

    @abstractmethod
    def get_next_states(self, cur_states: Any, coupon_action: np.ndarray, user_actions: List[np.ndarray]) -> Any:
        """Generate next day's user state from current day's coupon action and user's response action.

        Args:
            cur_states (Any): User states of current day, how it is formed is up to participants.
            coupon_action (np.ndarray): Promotion action of current day.
                example: np.array([2.0, 0.70]), issuing 2 coupons of 0.70 discount to all users.
            user_actions (List[np.ndarray]): Response actions from all users returned by the environment, whose structure conforms to what defined in offline data.
                example: [np.array([1.0, 22.34]), np.array([0, 0]), ... , np.array([2.0, 54.21])], the size and order of the list
                is the same as the amount and index of users in the offline user data. That is, user_actions[0] corresponds to the user of index 0.

        Return:
            next_states (Any): User states in next day, how it is formed is up to participants.
        """

    @abstractmethod
    def get_action_from_policy(self, user_states: Any) -> np.ndarray:
        """Generate current day's coupon action based on current day's user states depicted by participants.

        Args:
            user_states (Any): User states of current day, how it is formed is up to participants.

        Return:
            coupon_action (np.ndarray): Promotion action generated by participant's policy (applied to all users),
            whose structure conforms to what defined in offline data.
                example: np.array([2.0, 0.70]), issuing 2 coupons of 0.70 discount to all users.
        """


def get_pv_instance() -> PolicyValidation:
    """Wrapper to return policy object instance conforming to PolicyValidation inteface.
    This function will be invoked by evaluation program to fetch participant's implementation of PolicyValidation.
    """
    from baseline_policy_validation import BaselinePolicyValidation
    submission_dir, _ = os.path.split(os.path.abspath(__file__))
    return BaselinePolicyValidation(f"{submission_dir}/data/evaluation_start_states.npy", f"{submission_dir}/data/rl_model.zip")
    ## Or
    # from random_policy_validation import RandomPolicyValidation
    # return RandomPolicyValidation()
